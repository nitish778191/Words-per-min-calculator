{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kishl\\\\Desktop\\\\Words-per-min calculator\\\\typing-speed\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport randomWords from 'random-words';\nimport { useState } from \"react\";\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport Profile from \"./Profile.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst words_num = 150;\nconst time = \"Ready\";\nfunction App() {\n  _s();\n  const [button, setButton] = useState(\"Start\");\n  const [text, setText] = useState([]);\n  const [timer, setTimer] = useState(time);\n  const [timerClass, setTimerClass] = useState(\"timerB\");\n  const [read, setRead] = useState(true);\n  const [running, setRun] = useState(false);\n  const [correct, setCorrect] = useState(Array(150));\n  const [userWords, setUserWords] = useState(Array(150));\n  const [finished, setFinished] = useState(false);\n  const [correctNum, setCorrectNum] = useState(-1);\n  const [inter, setInter] = useState(\"\");\n  const [currWord, setCurrWord] = useState(0);\n  const [charInWord, setCharInWord] = useState(0);\n  const [wordIn, setWordIn] = useState(\"\");\n  const [results, setResults] = useState(\"resultDisabled\");\n  const [resultTextWPM, setResultTextWPM] = useState(\"\");\n  const [resultTextA, setResultTextA] = useState(\"\");\n  const [accuracy, setAccuracy] = useState(false);\n  function textGenerator() {\n    return new Array(words_num).fill(null).map(() => randomWords());\n  }\n\n  //test runner\n  async function startTest() {\n    //resets vars and interval and clears user input\n    if (button === \"Restart\") {\n      setButton(\"Start\");\n      setText([]);\n      setUserWords(Array(150));\n      setTimer(\"Ready\");\n      setTimerClass(\"timerB\");\n      setRead(true);\n      setRun(false);\n      setCorrect(Array(150));\n      setFinished(false);\n      setCorrectNum(-1);\n      setCharInWord(0);\n      setCurrWord(0);\n      setWordIn(\"\");\n      setResults(\"resultDisabled\");\n      clearInterval(inter);\n      document.querySelector(\"textarea\").value = \"\";\n      return;\n    }\n\n    //setups text and focus users on text box\n\n    await new Promise(resolve => setTimeout(resolve, 500));\n    setTimer(\"Set\");\n    await new Promise(resolve => setTimeout(resolve, 1100));\n    setTimer(\"Go\");\n    await new Promise(resolve => setTimeout(resolve, 700));\n    setTimer(60);\n    setCorrectNum(0);\n    setText(textGenerator());\n    setButton('Restart');\n    setRead(false);\n    setRun(true);\n    setCursor();\n\n    //timer\n    let interval = setInterval(() => {\n      setTimer(current => {\n        if (current > 0) {\n          if (current < 11) {\n            setTimerClass(\"timerRS\");\n          } else if (current < 40) {\n            setTimerClass(\"timerY\");\n          } else {\n            setTimerClass(\"timerG\");\n          }\n          return current - 1;\n        }\n        //finish get results and displays\n        else {\n          setRead(true);\n          setTimerClass(\"timerB\");\n          clearInterval(interval);\n          setCorrectNum(wordPerMin());\n          if (correctNum > 38) {\n            setResultTextWPM(\"resultTextG\");\n          } else {\n            setResultTextWPM(\"resultTextY\");\n          }\n          setRun(false);\n          setFinished(true);\n          setResults(\"results\");\n          getAccuracy();\n          return \"Finished\";\n        }\n      });\n    }, 1000);\n    setInter(interval);\n  }\n\n  //this function focus users on textbox\n  function setCursor() {\n    document.querySelector(\"textarea\").focus();\n    document.querySelector(\"textarea\").setSelectionRange(0, 0);\n  }\n\n  //checks the user input for buttons like back space\n  function inputHandler(_ref) {\n    let {\n      keyCode,\n      key\n    } = _ref;\n    if (read) {\n      return;\n    }\n    let userWord = wordIn.split(\" \");\n\n    //backspace\n    if (keyCode === 8) {\n      //if at start of a word go back\n      if (charInWord <= 0) {\n        //if user word is same size as actual\n        if (userWord[currWord - 1].length === text[currWord - 1].length) {\n          setCharInWord(text[currWord - 1].length - 1);\n          setCurrWord(currWord - 1);\n        }\n        //user word bigger than actual\n        else if (userWord[currWord - 1].length > text[currWord - 1].length) {\n          setCharInWord(text[currWord - 1].length + (userWord[currWord - 1].length - text[currWord - 1].length));\n          setCurrWord(currWord - 1);\n        }\n        //user word smaller than actual\n        else if (userWord[currWord - 1].length < text[currWord - 1].length) {\n          setCharInWord(text[currWord - 1].length - (text[currWord - 1].length - userWord[currWord - 1].length));\n          setCurrWord(currWord - 1);\n        }\n      } else {\n        setCharInWord(charInWord - 1);\n      }\n    }\n    //space bar move to next word\n    else if (keyCode === 32) {\n      if (charInWord != 0) {\n        setCurrWord(currWord + 1);\n        setCharInWord(0);\n      } else {\n        let newIn = wordIn.substring(0, wordIn.length - 1);\n        setWordIn(newIn);\n      }\n    } else {\n      setCharInWord(charInWord + 1);\n    }\n  }\n\n  //compares the characters inputted to actually to color text as well as determine number of correct\n  function charCompare(wordI, char, charI) {\n    const userWord = wordIn.split(\" \");\n    if (wordI === currWord && charI === charInWord) {\n      return \"greenChar\";\n    } else if (wordI < currWord || wordI === currWord && userWord[wordI] === text[wordI]) {\n      if (text[wordI] === userWord[wordI]) {\n        correct[wordI] = 1;\n        return \"blueChar\";\n      } else {\n        correct[wordI] = 0;\n        return \"redChar\";\n      }\n    } else if (wordI === currWord && charI < charInWord) {\n      if (userWord[wordI][charI] === text[wordI][charI]) {\n        return \"blueChar\";\n      } else {\n        return \"redChar\";\n      }\n    }\n  }\n  function wordPerMin() {\n    let count = 0;\n    for (let i = 0; i < correct.length; i++) {\n      if (correct[i]) {\n        count++;\n      }\n    }\n    return count;\n  }\n  function getAccuracy() {\n    if (!finished || accuracy) {\n      return \"\";\n    }\n    if (Math.round(correctNum / (currWord + 1) * 10000) / 100 > 70) {\n      setResultTextA(\"resultTextG\");\n    } else {\n      setResultTextA(\"resultTextY\");\n    }\n    setAccuracy(true);\n\n    //color of wpm\n    if (correctNum > 38) {\n      setResultTextWPM(\"resultTextG\");\n    } else {\n      setResultTextWPM(\"resultTextY\");\n    }\n    return \"\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Typing Speed Test \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"headerContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: results,\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \" Words Per Min\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: resultTextWPM,\n            children: [\" \", correctNum]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: timerClass,\n          children: timer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: results,\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Accuracy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this), charInWord != 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: resultTextA,\n            children: [\" \", Math.round(correctNum / (currWord + 1) * 10000) / 100 + \"% \", \" \", getAccuracy()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 39\n          }, this), charInWord == 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: resultTextA,\n            children: [\" \", Math.round(correctNum / currWord * 10000) / 100 + \"% \", \" \", getAccuracy()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }, this), running && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"UserContainer\",\n      id: \"currWord\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"content\",\n        children: wordIn.split(\" \")[currWord]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this), running && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: text.map((word, i) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: word.split(\"\").map((char, iChar) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: charCompare(i, char, iChar),\n              children: char\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 38\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this), !running && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [finished && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: text.map((word, i) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: word.split(\"\").map((char, iChar) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: charCompare(i, char, iChar),\n              children: char\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 38\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: correctNum === -1 && \"Press Start When Ever Ready\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"startButton\",\n        id: \"button\",\n        onClick: startTest,\n        children: button\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userInActive\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          spellCheck: \"false\",\n          readOnly: read,\n          onKeyDown: inputHandler,\n          onChange: e => setWordIn(e.target.value),\n          value: wordIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"8HTPCcDd/i6XenEhm1ZFeHAW6YI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["randomWords","useState","BrowserRouter","Route","Routes","Profile","jsxDEV","_jsxDEV","Fragment","_Fragment","words_num","time","App","_s","button","setButton","text","setText","timer","setTimer","timerClass","setTimerClass","read","setRead","running","setRun","correct","setCorrect","Array","userWords","setUserWords","finished","setFinished","correctNum","setCorrectNum","inter","setInter","currWord","setCurrWord","charInWord","setCharInWord","wordIn","setWordIn","results","setResults","resultTextWPM","setResultTextWPM","resultTextA","setResultTextA","accuracy","setAccuracy","textGenerator","fill","map","startTest","clearInterval","document","querySelector","value","Promise","resolve","setTimeout","setCursor","interval","setInterval","current","wordPerMin","getAccuracy","focus","setSelectionRange","inputHandler","_ref","keyCode","key","userWord","split","length","newIn","substring","charCompare","wordI","char","charI","count","i","Math","round","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","word","iChar","onClick","spellCheck","readOnly","onKeyDown","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/kishl/Desktop/Words-per-min calculator/typing-speed/src/App.js"],"sourcesContent":["\r\nimport randomWords from 'random-words'\r\nimport {useState} from \"react\";\r\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\r\nimport './App.css';\r\nimport Profile from \"./Profile.js\";\r\n\r\nconst words_num = 150\r\nconst time = \"Ready\"\r\nfunction App() {\r\n\r\n  const [button, setButton] = useState(\"Start\")\r\n  const [text, setText] = useState([])\r\n  const [timer, setTimer] = useState(time)\r\n  const [timerClass, setTimerClass] = useState(\"timerB\")\r\n  const [read, setRead] = useState( true)\r\n  const [running, setRun] = useState( false)\r\n  const [correct, setCorrect ] = useState(Array(150))\r\n  const [userWords, setUserWords ] = useState(Array(150))\r\n  const [finished, setFinished] = useState(false)\r\n  const [correctNum, setCorrectNum] = useState(-1)\r\n  const [inter, setInter] = useState(\"\")\r\n\r\n  const [currWord, setCurrWord] = useState(0);\r\n  const [charInWord, setCharInWord] = useState(0)\r\n\r\n  const [wordIn, setWordIn] = useState(\"\")\r\n\r\n  const [results, setResults] = useState(\"resultDisabled\")\r\n  const [resultTextWPM, setResultTextWPM] = useState(\"\")\r\n  const [resultTextA, setResultTextA] = useState(\"\")\r\n\r\n  const [accuracy, setAccuracy] = useState(false)\r\n\r\n\r\n\r\n  function textGenerator ()\r\n  {\r\n    return new Array(words_num).fill(null).map(() => randomWords())\r\n  }\r\n\r\n\r\n\r\n\r\n  //test runner\r\n  async function startTest() {\r\n\r\n    //resets vars and interval and clears user input\r\n    if (button === \"Restart\") {\r\n      setButton(\"Start\")\r\n      setText([])\r\n      setUserWords(Array(150))\r\n      setTimer(\"Ready\")\r\n      setTimerClass(\"timerB\")\r\n      setRead(true)\r\n      setRun(false)\r\n      setCorrect(Array(150))\r\n      setFinished(false)\r\n      setCorrectNum(-1)\r\n      setCharInWord(0)\r\n      setCurrWord(0)\r\n      setWordIn(\"\")\r\n      setResults(\"resultDisabled\")\r\n      clearInterval(inter)\r\n      document.querySelector(\"textarea\").value = \"\"\r\n\r\n      return;\r\n    }\r\n\r\n    //setups text and focus users on text box\r\n\r\n    await new Promise(resolve => setTimeout(resolve, 500))\r\n    setTimer(\"Set\")\r\n    await new Promise(resolve => setTimeout(resolve, 1100))\r\n    setTimer(\"Go\")\r\n    await new Promise(resolve => setTimeout(resolve, 700))\r\n    setTimer(60)\r\n\r\n\r\n    setCorrectNum(0)\r\n    setText(textGenerator())\r\n    setButton('Restart')\r\n    setRead(false)\r\n    setRun(true)\r\n    setCursor()\r\n\r\n    //timer\r\n    let interval = setInterval(() => {\r\n      setTimer((current) => {\r\n        if (current > 0) {\r\n          if (current < 11) {\r\n            setTimerClass(\"timerRS\")\r\n          } else if (current < 40) {\r\n            setTimerClass(\"timerY\")\r\n          } else {\r\n            setTimerClass(\"timerG\")\r\n          }\r\n          return current - 1;\r\n        }\r\n        //finish get results and displays\r\n        else {\r\n\r\n\r\n          setRead(true)\r\n          setTimerClass(\"timerB\")\r\n          clearInterval(interval)\r\n          setCorrectNum(wordPerMin())\r\n          if (correctNum > 38) {\r\n            setResultTextWPM(\"resultTextG\")\r\n          } else {\r\n            setResultTextWPM(\"resultTextY\")\r\n          }\r\n\r\n\r\n          setRun(false)\r\n          setFinished(true)\r\n          setResults(\"results\")\r\n          getAccuracy()\r\n          return \"Finished\"\r\n        }\r\n\r\n      })\r\n    }, 1000)\r\n    setInter(interval)\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //this function focus users on textbox\r\n  function setCursor()\r\n  {\r\n\r\n    document.querySelector(\"textarea\").focus();\r\n    document.querySelector(\"textarea\").setSelectionRange(0,0);\r\n\r\n  }\r\n\r\n  //checks the user input for buttons like back space\r\n  function inputHandler ({keyCode, key})\r\n  {\r\n    if(read)\r\n    {\r\n      return;\r\n    }\r\n    let userWord = wordIn.split(\" \");\r\n\r\n    //backspace\r\n    if(keyCode === 8)\r\n    {\r\n\r\n      //if at start of a word go back\r\n      if(charInWord <= 0)\r\n      {\r\n        //if user word is same size as actual\r\n        if(userWord[currWord-1].length === text[currWord-1].length)\r\n        {\r\n          setCharInWord(text[currWord-1].length -1)\r\n          setCurrWord(currWord-1)\r\n        }\r\n        //user word bigger than actual\r\n        else if(userWord[currWord-1].length > text[currWord-1].length)\r\n        {\r\n          setCharInWord\r\n          (text[currWord-1].length  +(userWord[currWord-1].length - text[currWord-1].length ))\r\n          setCurrWord(currWord-1)\r\n        }\r\n        //user word smaller than actual\r\n        else if(userWord[currWord-1].length < text[currWord-1].length)\r\n        {\r\n          setCharInWord\r\n          (text[currWord-1].length -(text[currWord-1].length -userWord[currWord-1].length))\r\n          setCurrWord(currWord-1)\r\n        }\r\n\r\n      }\r\n      else\r\n      {\r\n        setCharInWord(charInWord -1)\r\n      }\r\n\r\n\r\n    }\r\n    //space bar move to next word\r\n    else if (keyCode === 32)\r\n    {\r\n      if(charInWord != 0)\r\n      {\r\n        setCurrWord(currWord +1)\r\n        setCharInWord(0)\r\n      }\r\n      else\r\n      {\r\n\r\n        let newIn = wordIn.substring(0, wordIn.length -1)\r\n        setWordIn(newIn)\r\n      }\r\n\r\n    }\r\n    else\r\n    {\r\n\r\n      setCharInWord(charInWord+1)\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  //compares the characters inputted to actually to color text as well as determine number of correct\r\n  function charCompare( wordI, char,charI)\r\n  {\r\n    const userWord = wordIn.split(\" \");\r\n\r\n    if(wordI === currWord && charI === charInWord){\r\n      return\"greenChar\"\r\n    }\r\n    else if( wordI < currWord || ( wordI === currWord && userWord[wordI] === text[wordI]))\r\n    {\r\n      if(text[wordI] === userWord[wordI])\r\n      {\r\n        correct[wordI] = 1;\r\n        return \"blueChar\"\r\n      }\r\n      else\r\n      {\r\n        correct[wordI] = 0;\r\n        return \"redChar\"\r\n      }\r\n    }\r\n    else if(wordI === currWord && charI < charInWord )\r\n    {\r\n      if(userWord[wordI][charI] === text[wordI][charI])\r\n      {\r\n        return\"blueChar\"\r\n      }\r\n      else\r\n      {\r\n        return \"redChar\"\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  function wordPerMin()\r\n  {\r\n    let count = 0;\r\n    for( let i = 0; i < correct.length; i++)\r\n    {\r\n      if(correct[i])\r\n      {\r\n        count++;\r\n      }\r\n    }\r\n    return  count;\r\n  }\r\n\r\n  function getAccuracy()\r\n  {\r\n    if(!finished || accuracy)\r\n    {\r\n      return \"\";\r\n    }\r\n\r\n\r\n    if((Math.round((correctNum/(currWord+1))*10000)/100) >70)\r\n    {\r\n      setResultTextA(\"resultTextG\")\r\n    }\r\n    else\r\n    {\r\n      setResultTextA(\"resultTextY\")\r\n    }\r\n    setAccuracy(true)\r\n\r\n    //color of wpm\r\n    if (correctNum > 38) {\r\n      setResultTextWPM(\"resultTextG\")\r\n    } else {\r\n      setResultTextWPM(\"resultTextY\")\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>Typing Speed Test </h1>\r\n          <div className=\"headerContainer\">\r\n            <div className ={results}>\r\n              <h5> Words Per Min</h5>\r\n              <h3 className={resultTextWPM}> {correctNum}</h3>\r\n            </div>\r\n            <h2 className={timerClass}>{timer}</h2>\r\n            <div className ={results}>\r\n              <h5>Accuracy</h5>\r\n              {charInWord != 0 &&(    <h3 className={resultTextA}> {Math.round((correctNum/(currWord+1))*10000)/100+\"% \"} {getAccuracy()}</h3>)}\r\n              {charInWord == 0 &&(    <h3 className={resultTextA}> {Math.round((correctNum/(currWord))*10000)/100+\"% \"} {getAccuracy()}</h3>)}\r\n            </div>\r\n          </div>\r\n\r\n        </header>\r\n        {running && (\r\n            <div className=\"UserContainer\" id=\"currWord\">\r\n          <label className=\"content\" >{ wordIn.split(\" \")[currWord]}</label>\r\n        </div>)}\r\n        {running  && (\r\n            <div className=\"container\">\r\n              <div className=\"content\">\r\n                {text.map((word, i) => (\r\n                    <>\r\n                            <span>\r\n                             {word.split(\"\").map((char, iChar) =>\r\n                                 (\r\n                                     <span className={charCompare(i, char, iChar)}>{char}</span>\r\n                                 ) )}\r\n                           </span>\r\n                      <span> </span>\r\n                    </>\r\n\r\n                ))}\r\n              </div>\r\n\r\n\r\n            </div>\r\n        )\r\n        }\r\n        {!running && (\r\n\r\n            <div className=\"container\">\r\n              {finished && (\r\n\r\n                  <div className=\"content\">\r\n                    {text.map((word, i) => (\r\n                        <>\r\n                            <span>\r\n                             {word.split(\"\").map((char, iChar) =>\r\n                                 (\r\n                                     <span className={charCompare(i, char, iChar)}>{char}</span>\r\n                                 ) )}\r\n                            </span>\r\n                          <span> </span>\r\n                        </>\r\n\r\n                    ))}\r\n                  </div>)}\r\n\r\n              <div className=\"content\">\r\n                { correctNum === -1 &&\r\n                (\"Press Start When Ever Ready\") }\r\n\r\n              </div>\r\n            </div>\r\n\r\n        )}\r\n\r\n        <div className=\"section\">\r\n          <button className=\"startButton\" id=\"button\" onClick={startTest}>{button}</button>\r\n\r\n        </div>\r\n        <div className=\"userInActive\">\r\n          <form >\r\n                   <textarea  spellCheck={\"false\"} readOnly={read} onKeyDown={inputHandler} onChange={(e) => setWordIn(e.target.value)} value={wordIn}>\r\n\r\n                   </textarea>\r\n          </form>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}